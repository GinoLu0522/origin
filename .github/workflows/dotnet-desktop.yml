name: .NET Core Desktop CI/CD + Code Review

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

env:
  CODE_ROOT: server/WebServer
  SOLUTION_NAME: WebServer.sln

jobs:
  build:
    runs-on: windows-latest
    name: Build and Code Review

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET 8.x
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Restore dependencies
        working-directory: ${{ env.CODE_ROOT }}
        run: msbuild $env:SOLUTION_NAME /t:Restore /p:Configuration=Release

      - name: Build solution
        working-directory: ${{ env.CODE_ROOT }}
        run: |
          msbuild $env:SOLUTION_NAME /p:Configuration=Release /fl /flp:logfile=msbuild.log;errorsonly
        continue-on-error: true

      - name: Code Review - Build Errors
        if: failure()
        working-directory: ${{ env.CODE_ROOT }}
        shell: pwsh
        run: |
          echo "### ❌ Build Failed" >> $env:GITHUB_STEP_SUMMARY
          echo "```" >> $env:GITHUB_STEP_SUMMARY
          Get-Content msbuild.log >> $env:GITHUB_STEP_SUMMARY
          echo "```" >> $env:GITHUB_STEP_SUMMARY

      - name: Code Review - Static Checks
        shell: pwsh
        working-directory: ${{ env.CODE_ROOT }}
        run: |
          echo "### 🧠 Code Review (Static Analysis)" >> $env:GITHUB_STEP_SUMMARY
          echo "```" >> $env:GITHUB_STEP_SUMMARY

          $patterns = @{
            "❗ 空註解行" = '^\s*//\s*$'
            "❗ 只有數字的註解" = '^\s*//\s*\d{3,}\s*$'
            "❗ 包含 Console.WriteLine" = 'Console\.WriteLine'
            "❗ 包含 TODO 或 FIXME" = 'TODO|FIXME'
            "❗ 行尾空白" = '\s+$'
          }

          $hasIssues = $false
          $changedFiles = git diff --name-only origin/master | Where-Object { $_.EndsWith(".cs") }

          foreach ($file in $changedFiles) {
            if (Test-Path $file) {
              $lines = Get-Content $file
              $consecutiveEmpty = 0  # 連續空行計數器
              
              for ($i = 0; $i -lt $lines.Count; $i++) {
                $line = $lines[$i]
                $lineno = $i + 1
                $lineIssues = @()

                # 檢查預定義模式
                foreach ($msg in $patterns.Keys) {
                  if ($line -match $patterns[$msg]) {
                    $lineIssues += $msg
                    $hasIssues = $true
                  }
                }

                # 檢查行長
                if ($line.Length -gt 120) {
                  $lineIssues += "❗ 行長超過 120 字元"
                  $hasIssues = $true
                }

                # 檢查連續空行 (新邏輯)
                if ($line -eq "") {
                  $consecutiveEmpty++
                  if ($consecutiveEmpty -eq 3) {
                    $lineIssues += "❗ 三個以上連續空行"
                    $hasIssues = $true
                  }
                } else {
                  $consecutiveEmpty = 0  # 遇到非空行重置計數
                }

                # 報告該行所有問題
                if ($lineIssues.Count -gt 0) {
                  $issuesText = $lineIssues -join ", "
                  echo "${file}:${lineno} => $issuesText" >> $env:GITHUB_STEP_SUMMARY
                }
              }
            }
          }

          if (-not $hasIssues) {
            echo "✅ No suspicious patterns found." >> $env:GITHUB_STEP_SUMMARY
          }

          echo "```" >> $env:GITHUB_STEP_SUMMARY
