name: .NET Core Desktop CI/CD

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

env:
  CODE_ROOT: server/WebServer
  SOLUTION_NAME: WebServer.sln
  WAP_DIR: WebServer.Package

jobs:
  validate:
    runs-on: windows-latest

    strategy:
      matrix:
        configuration: [Release]
        platform: [x64]

    steps:
      - uses: actions/checkout@v4

      - name: Debug - List CODE_ROOT directory
        run: Get-ChildItem -Recurse
        working-directory: ${{ env.CODE_ROOT }}
        shell: pwsh

      - name: Validate Paths
        run: |
          $solutionPath = "${{ env.CODE_ROOT }}/${{ env.SOLUTION_NAME }}"
          $wapProjPath = "${{ env.CODE_ROOT }}/${{ env.WAP_DIR }}/${{ env.WAP_DIR }}.wapproj"

          Write-Output "##[group]路徑驗證資訊"
          Write-Output "解決方案路徑: $solutionPath"
          Write-Output "WAP 路徑: $wapProjPath"
          Write-Output "##[endgroup]"

          if (-not (Test-Path $solutionPath)) {
              Write-Output "::error::Missing solution file"
              exit 1
          }

          if (-not (Test-Path $wapProjPath)) {
              Write-Output "::error::Missing WAP project"
              Get-ChildItem -Path "${{ env.CODE_ROOT }}" -Recurse
              exit 1
          }
        shell: pwsh

      - name: Setup .NET 8.x
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Restore dependencies
        run: |
          msbuild $env:SOLUTION_NAME /t:Restore /p:Configuration=${{ matrix.configuration }}
        working-directory: ${{ env.CODE_ROOT }}
        shell: pwsh

      - name: Build solution
        run: |
          msbuild $env:SOLUTION_NAME /p:Configuration=${{ matrix.configuration }} /p:Platform="${{ matrix.platform }}"
        working-directory: ${{ env.CODE_ROOT }}
        shell: pwsh

      - name: Run tests
        run: dotnet test --configuration ${{ matrix.configuration }} --no-build
        working-directory: ${{ env.CODE_ROOT }}
        shell: pwsh

      - name: Decode signing certificate
        run: |
          [IO.File]::WriteAllBytes(
            "GitHubActionsWorkflow.pfx",
            [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
          )
        working-directory: ${{ env.CODE_ROOT }}/${{ env.WAP_DIR }}
        shell: pwsh

      - name: Build MSIX package
        run: |
          msbuild $env:WAP_DIR.wapproj `
            /p:Configuration=${{ matrix.configuration }} `
            /p:AppxBundle=Always `
            /p:UapAppxPackageBuildMode=StoreUpload `
            /p:AppxBundlePlatforms="${{ matrix.platform }}" `
            /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx `
            /p:PackageCertificatePassword="${{ secrets.Pfx_Key }}"
        working-directory: ${{ env.CODE_ROOT }}/${{ env.WAP_DIR }}
        shell: pwsh

      - name: Cleanup certificate
        run: Remove-Item -Path GitHubActionsWorkflow.pfx -Force
        working-directory: ${{ env.CODE_ROOT }}/${{ env.WAP_DIR }}
        shell: pwsh

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.WAP_DIR }}_${{ matrix.platform }}
          path: ${{ env.CODE_ROOT }}/${{ env.WAP_DIR }}/AppPackages
