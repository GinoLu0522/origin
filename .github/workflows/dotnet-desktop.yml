name: .NET Core Desktop + GPT Code Review

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest

    env:
      Solution_Name: your-solution-name
      Test_Project_Path: your-test-project-path
      Wap_Project_Directory: your-wap-project-directory-name
      Wap_Project_Path: your-wap-project-path

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v2

      - name: Execute unit tests
        run: dotnet test

      - name: Restore the application
        run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
        env:
          Configuration: ${{ matrix.configuration }}

      - name: Decode the pfx
        run: |
          $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
          $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
          [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

      - name: Create the app package
        run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
        env:
          Appx_Bundle: Always
          Appx_Bundle_Platforms: x86|x64
          Appx_Package_Build_Mode: StoreUpload
          Configuration: ${{ matrix.configuration }}

      - name: Remove the pfx
        run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: MSIX Package
          path: ${{ env.Wap_Project_Directory }}\AppPackages

  gpt-code-review:
    name: GPT Auto Code Review (C#)
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'

    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed C# files diff
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}
          git diff origin/${{ github.event.pull_request.base.ref }} -- '*.cs' > cs.diff || true
          if [ ! -s cs.diff ]; then
            echo "No C# changes detected."
            echo "NO_CHANGES" > decision.txt
            exit 0
          fi

      - name: Call OpenAI GPT for code review
        id: gpt_review
        run: |
          prompt="你是資深 C# 工程師，請根據以下差異提供具體建議，若無問題請回答 approve，若需要修改請回答 request-changes，並且給出原因與建議。\n\n$(cat cs.diff)"

          review_response=$(curl https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "model": "gpt-4o-mini",
              "messages": [{"role": "system", "content": "你是資深 C# 工程師。"}, {"role": "user", "content": "'"$prompt"'"}],
              "temperature": 0.2
            }' | jq -r '.choices[0].message.content')

          echo "$review_response" > review.txt

          if echo "$review_response" | grep -iq "request-changes"; then
            echo "request-changes" > decision.txt
          else
            echo "approve" > decision.txt
          fi

      - name: Submit Review to PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO: ${{ github.repository }}
        run: |
          decision=$(cat decision.txt)
          if [[ "$decision" == "approve" ]]; then
            gh pr review "$PR_NUMBER" --repo "$REPO" --approve --body-file review.txt
          elif [[ "$decision" == "request-changes" ]]; then
            gh pr review "$PR_NUMBER" --repo "$REPO" --request-changes --body-file review.txt
          else
            gh pr comment "$PR_NUMBER" --repo "$REPO" --body-file review.txt
          fi
